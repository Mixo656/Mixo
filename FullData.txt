module fa_df (A, B, Cin, Sum, Cout);
  input A, B, Cin;           // Declare inputs A, B, and Cin (Carry-In)
  output Sum, Cout;          // Declare outputs Sum and Cout (Carry-Out)

  // Assignments for Sum and Cout using the logic of a Full Adder
  assign Sum = A ^ B ^ Cin;  // XOR operation for Sum
  assign Cout = (A & B) | (B & Cin) | (A & Cin);  // OR of ANDs for Carry-Out
endmodule


module test_fa_df;
  reg A, B, Cin;           // Declare inputs A, B, and Cin as registers
  wire Sum, Cout;          // Declare outputs Sum and Cout as wires

  // Instantiate the full adder module
  fa_df uut (A, B, Cin, Sum, Cout);

  initial begin
    $dumpfile("fa_df.vcd"); // Specifies the output file for waveform
    $dumpvars(0, test_fa_df); // Dumps variables for the specified module

    // Apply test cases
    #0 A = 0; B = 0; Cin = 0;   // Test case 1: A=0, B=0, Cin=0
    #1 A = 0; B = 0; Cin = 1;   // Test case 2: A=0, B=0, Cin=1
    #1 A = 0; B = 1; Cin = 0;   // Test case 3: A=0, B=1, Cin=0
    #1 A = 0; B = 1; Cin = 1;   // Test case 4: A=0, B=1, Cin=1
    #1 A = 1; B = 0; Cin = 0;   // Test case 5: A=1, B=0, Cin=0
    #1 A = 1; B = 0; Cin = 1;   // Test case 6: A=1, B=0, Cin=1
    #1 A = 1; B = 1; Cin = 0;   // Test case 7: A=1, B=1, Cin=0
    #1 A = 1; B = 1; Cin = 1;   // Test case 8: A=1, B=1, Cin=1
    #1 $finish;               // End the simulation
  end
endmodule
