module mux_2_1 (I0, I1, S, Y);
  input I0, I1, S;           // Declare inputs I0, I1, and S (select line)
  output reg Y;              // Declare output Y as a register

  always @ (S or I0 or I1) begin
    case (S)                 // Select case based on S
      0: Y = I0;             // If S = 0, output Y = I0
      1: Y = I1;             // If S = 1, output Y = I1
      default: Y = 0;        // Default case (optional) for invalid values of S
    endcase
  end
endmodule



module test_mux_2_1;
  reg I0, I1, S;      // Declare inputs I0, I1, and S as registers
  wire Y;             // Declare output Y as wire

  // Instantiate the 2-to-1 multiplexer
  mux_2_1 uut (I0, I1, S, Y);

  initial begin
    $dumpfile("mux_2_1.vcd");  // Specify the output file for waveform
    $dumpvars(0, test_mux_2_1); // Dump variables for the specified module

    // Apply test cases
    #0 I0 = 0; I1 = 1; S = 0;  // Test case 1: S=0, Y should be I0 (0)
    #1 I0 = 0; I1 = 1; S = 1;  // Test case 2: S=1, Y should be I1 (1)
    #1 I0 = 1; I1 = 0; S = 0;  // Test case 3: S=0, Y should be I0 (1)
    #1 I0 = 1; I1 = 0; S = 1;  // Test case 4: S=1, Y should be I1 (0)
    #1 $finish;                // End the simulation
  end
endmodule
