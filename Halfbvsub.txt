module ha_beh (A, B, Diff, Borr);
  input A, B;              // Declare inputs A and B
  output Diff, Borr;       // Declare outputs Diff and Borr
  reg Diff, Borr;          // Declare Diff and Borr as reg for procedural assignment

  always @(A or B) begin
    Diff = A ^ B;          // XOR operation for Difference
    Borr = ~A & B;         // Borrow logic for a half-subtractor
  end
endmodule

module ha_test;
  reg A, B;             // Declare inputs A and B as registers
  wire Diff, Borr;      // Declare outputs Diff and Borr as wires

  // Instantiate the half-subtractor module
  ha_beh haal (A, B, Diff, Borr);

  // Testbench to simulate the half-subtractor
  initial begin
    $dumpfile("haa.vcd");       // Specifies the output file for waveform
    $dumpvars(0, ha_test);      // Dumps variables for the specified module

    // Apply test cases
    #0 A = 0; B = 0;            // Test case 1: A=0, B=0
    #1 A = 0; B = 1;            // Test case 2: A=0, B=1
    #1 A = 1; B = 0;            // Test case 3: A=1, B=0
    #1 A = 1; B = 1;            // Test case 4: A=1, B=1
    #1 $finish;                 // End the simulation
  end
endmodule

// Half-Subtractor module (ha_beh) for reference
module ha_beh (A, B, Diff, Borr);
  input A, B;
  output Diff, Borr;
  reg Diff, Borr;

  always @(A or B) begin
    Diff = A ^ B;          // XOR operation for Difference
    Borr = ~A & B;         // AND with complement of A for Borrow
  end
endmodule



